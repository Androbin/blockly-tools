#!/bin/bash

# Copyright 2015 Google Inc. All Rights Reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Scripts for helping with Blockly++ development.
# Run envsetup.sh to set the path for this script, then
# use the commands with bgit <command>

function start {
  if [ "$1" != "" ]; then
    repo start $1 .
  else
    echo "Usage: bgit start <branch name>"
  fi
}

function close {
  if [ "$BLOCKLY_INIT" != true ]; then
    echo "Must run envsetup.sh before closing a branch!"
    return
  fi

  local branch="$(git rev-parse --abbrev-ref HEAD)"
  if [ "$branch" = "master" ]; then
    echo "Cannot close the master branch"
    return
  fi
  if [ "$branch" = "HEAD" ]; then
    echo "Not on a branch"
    return
  fi

  while true; do
    read -pr "This will delete the remote and local branches for $branch. Continue? (y/n):" yn
    case $yn in
      [Yy]* ) break;;
      [Nn]* ) return;;
      * ) echo "Please type y or n";;
    esac
  done
  rem_branch="$BLOCKLY_USER-$branch"
  git push origin :$rem_branch
  repo abandon $branch
}

function run_tests_android() {
  local verbose=""
  while [ "$1" != "" ]; do
    case $1 in
      -v | --verbose ) verbose="true";;
      * )             echo "unknown arg $1";;
    esac
    shift
  done

  local args=""
  if test -z $verbose; then
    args="-q"
  fi

  echo -n "Running tests... "

  pushd android/Blockly/ >& /dev/null

  if ! ./gradlew $args cC; then
    echo "FAILED - ABORTING"
    popd >& /dev/null
    exit 1
  fi

  echo "SUCCESS"
  popd >& /dev/null
}

function run_tests() {
  if [[ $(git config --get remote.origin.url) == *"android"* ]]; then
    run_tests_android "$@"
  else
    echo "Tests not yet supported for non-Android"
  fi
}

function run_lint_android() {
  echo -n "Running linter... "

  pushd android/Blockly/ >& /dev/null

  if ! ./gradlew check; then
    echo "FAILED - ABORTING"
    popd >& /dev/null
    exit 1
  fi

  echo "SUCCESS"
  popd >& /dev/null
}

function run_lint() {
  if [[ $(git config --get remote.origin.url) == *"android"* ]]; then
    run_lint_android "$@"
  else
    echo "Lint not yet supported for non-Android"
  fi
}

function clone_fork() {
  if [ "$BLOCKLY_INIT" != true ]; then
    echo "Must run envsetup.sh before trying to clone your web fork."
    return
  fi

  fork_repo_base="https://github.com/$BLOCKLY_USER/blockly"
  fork_repo_ext=""
  fork_project="$1"

  if [ "$fork_project" = "" ]; then
    echo "Must specify one of 'web', 'android', 'ios', or 'devtools' to clone a fork of."
    return;
  elif [ "$fork_project" = "android" ]; then
    fork_repo_ext="-android"
  elif [ "$fork_project" = "ios" ]; then
    fork_repo_ext="-ios"
  elif [ "$fork_project" = "devtools" ]; then
    fork_repo_ext="-devtools"
  elif [ "$fork_project" != "web" ]; then
    # 'web' is a valid value, but we don't do anything for it
    # which is why we just check it at the end.
    echo "Must specify one of 'web', 'android', 'ios', or 'devtools' to clone a fork of."
    return;
  fi

  fork_repo="$fork_repo_base$fork_repo_ext"
  fork_local_dir="$BLOCKLY_ROOT/${fork_project}-$BLOCKLY_USER"
  if [ -d "$fork_local_dir" ]; then
    echo "webfork directory already exists at $fork_local_dir. Aborting."
    return
  fi
  git clone "$fork_repo" "$fork_local_dir"

  if [ ! -d "$fork_local_dir" ]; then
    echo "Failed to clone repo. Ensure you have a fork of blockly on your GitHub account."
    return
  fi

  cd "$fork_local_dir"
  git remote add -t master -t develop upstream "https://github.com/google/blockly$fork_repo_ext"
}

# Verifies that you are currently in a forked git project with
# no uncommitted changes
function verify_fork() {
  if [ "$BLOCKLY_INIT" != true ]; then
    echo "Must run envsetup.sh before updating your web fork."
    return 1
  fi

  # Check that we're in a forked repo
  # TODO: Allow user to change 'origin' and $BLOCKLY_USER to something else
  if [ $(git remote -v | grep -ci "origin.*$BLOCKLY_USER") = "0" ]; then
    echo "bgit fupdate must be run from a git project with your fork as origin."
    return 1
  fi

  # Check that google is the upstream repo
  if [ $(git remote -v | grep -ci "upstream.*google") = "0" ]; then
    echo "google's project must be configured as upstream. Did you use 'bgit fork' to clone the repo?"
    return 1
  fi

  # Check that there's nothing to commit that will block checkouts
  if [ $(git status | grep -ci "working tree clean") = "0" ]; then
    echo "You have uncommited changes. Please commit or revert your changes before updating."
    return 1
  fi

  #ensure there's a develop and master branch locally
  if [ $(git branch | grep -c " develop$") = "0" ]; then
    git branch -f develop remotes/origin/develop
  fi
  if [ $(git branch | grep -c " master$") = "0" ]; then
    git branch -f master remotes/origin/master
  fi

  return 0
}

#
function update_fork() {
  verify_fork
  retval=$?

  if [ $retval != 0 ]; then
    return
  fi

  git fetch upstream

  git checkout master
  git pull upstream master
  git push origin HEAD:master

  git checkout develop
  git pull upstream develop
  git push origin HEAD:develop
}

function branch_fork() {
  verify_fork
  retval=$?

  if [ $retval != 0 ]; then
    return
  fi

  newbranch="$1"
  if [ "$newbranch" = "" ]; then
    echo "Missing branch name. Syntax is 'bgit webbranch <branchname>'"
    return;
  fi

  git branch -f "$newbranch" remotes/origin/develop
  git checkout "$newbranch"
}

function push {
  if [ "$BLOCKLY_INIT" != true ]; then
    echo "Must run envsetup.sh before pushing commits!"
    return
  fi

  if [[ $(git config --get remote.google.url) == *"google/blockly" ]]; then
    echo "You are on the public Blockly project. Do not push here."
    return
  fi

  local args=""
  local notest=""

  while [ "$1" != "" ]; do
    case $1 in
      -f | --force )  args="$args $1";;
      --notest )      notest="true";;
      * )             echo "unknown arg $1";;
    esac
    shift
  done

  if [ -z $notest ]; then
    run_tests
  fi

  local branch="$(git rev-parse --abbrev-ref HEAD)"
  local rem_branch="$BLOCKLY_USER-$branch"
  git push$args origin "$branch:$rem_branch"
  echo "Pushed change to $rem_branch. Add a reviewer on the website."
}

#NOTE: pull will only work after you've created the branch with push
function pull {
  if [ "$BLOCKLY_INIT" != true ]; then
    echo "Must run envsetup.sh before pulling!"
    return
  fi
  repo sync .
}

#Rebase the current branch on to master
function rebase {
  # Update the master branch
  # git pull origin master:master

  local args=""
  while [ "$1" != "" ]; do
    case $1 in
      -i | --interactive )  args="$args $1";;
      * )                   echo "unknown arg $1";;
    esac
    shift
  done

  # Rebase the current branch with args
  repo rebase$args
}

function help {
  echo "Available commands are:"
  echo "bgit start <branch> # Start a new local branch."
  echo "bgit close # Delete the current branch on GitHub and locally"
  echo "bgit push # Push the current branch to GitHub. Creates a remote branch if needed. Add '--notest' to skip pre-push tests."
  echo "bgit pull # Pull any changes to the current branch from GitHub"
  echo "bgit rebase # Rebase your current branch on to master"
  echo "bgit test # Runs android tests. Non-android tests are not supported yet."
  echo "bgit lint # Runs android linter. Non-android linting is not supported yet."
  echo "bgit fclone <project> # Clones an existing fork of the web project on your account. Project must be one of 'web', 'android', 'ios', 'devtools'"
  echo "bgit fupdate # Updates the master and develop branches for the current project. Must be in a forked git repo."
  echo "bgit fbranch <branchname> # Create a new branch in your forked repo based off develop."
}

if [ "$1" = "" ]; then
  help
else
  command=$1
  shift
  case $command in
    start )   	start "$@";;
    close )   	close "$@";;
    push )    	push "$@";;
    pull )    	pull "$@";;
    rebase )  	rebase "$@";;
    test)     	run_tests "$@";;
    lint)     	run_lint "$@";;
    fclone)  	clone_fork "$@";;
    fupdate)	update_fork "$@";;
    fbranch)  	branch_fork "$@";;
    *)        	help;;
  esac
fi
